//
// You received this file as part of Finroc
// A framework for innovative robot control
//
// Copyright (C) AG Robotersysteme TU Kaiserslautern
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
//----------------------------------------------------------------------
/*!\file    tConveniencePort.h
 *
 * \author  Max Reichardt
 *
 * \date    2011-04-18
 *
 * \brief Contains tConveniencePort
 *
 * \b tConveniencePort
 *
 */
//----------------------------------------------------------------------
#ifndef _core__structure__tConveniencePort_h_
#define _core__structure__tConveniencePort_h_

//----------------------------------------------------------------------
// External includes (system with <>, local with "")
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Internal includes with ""
//----------------------------------------------------------------------
#include "core/structure/tStructureElementRegister.h"
#include "core/port/tPortGroup.h"

//----------------------------------------------------------------------
// Debugging
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Namespace declaration
//----------------------------------------------------------------------
namespace finroc
{
namespace core
{
namespace structure
{

/**
 * Base class for ports that are typically used inside modules by application developer.
 */
template <typename BASE>
class tConveniencePortBase
{
protected:

  /*! \return Parent module of parameter */
  BASE* FindParent()
  {
    return static_cast<BASE*>(tStructureElementRegister::FindParent(this));
  }

  /*! Get auto-generated port name */
  util::tString GetPortName()
  {
    BASE* parent = FindParent();
    util::tString result = tStructureElementRegister::GetAutoGeneratedPortName(parent, UpdateCurrentPortNameIndex());
    return result;
  }

  /*! Get & update current index for auto-generated port names */
  int UpdateCurrentPortNameIndex(BASE* parent = NULL)
  {
    if (parent == NULL)
    {
      parent = FindParent();
    }
    if (typeid(*parent).name() != parent->count_for_type) // detect class change when traversing module type hierarchy
    {
      parent->count_for_type = typeid(*parent).name();
      parent->auto_name_port_count = 0;
    }
    int current_index = parent->auto_name_port_count;
    parent->auto_name_port_count++;
    return current_index;
  }
};

/*!
 * Base class for ports that are typically used inside modules by application developer.
 */

/**
 *
 *
 * Note for application developers:
 * Constructor takes variadic argument list... just any properties you want to assign to port (see tPort class).
 * However, unlike tPort, a string is only considered as name, if it is the first argument.
 */
template <typename T, typename BASE, typename PORT>
class tConveniencePort : public PORT, public tConveniencePortBase<BASE>
{
public:

  tConveniencePort(tFrameworkElement * (*getContainer)(BASE*)) : PORT(CreateStandardPCI(this->GetPortName(), getContainer(this->FindParent()))) {}

  /*!
   * Constructor takes variadic argument list... just any properties you want to assign to port.
   *
   * Unlike tPort, port name and parent are usually determined automatically (however, only possible when port is direct class member).
   * If this is not possible/desired, name needs to be provided as first constructor argument - parent as arbitrary one.
   *
   * So...
   *
   * The first argument is interpreted as port name if it is a string. Any further string argument is interpreted as config entry (relevant for parameters only).
   * A framework element pointer is interpreted as parent.
   * unsigned int arguments are interpreted as flags.
   * int argument is interpreted as queue length.
   * tBounds<T> are port's bounds.
   * tUnit argument is port's unit.
   * int16/short argument is interpreted as minimum network update interval.
   * const T& is interpreted as port's default value.
   * tPortCreationInfo<T> argument is copied. This is only allowed as first argument.
   *
   * This becomes a little tricky when port has numeric or string type.
   * There we have these rules:
   *
   * string type: The first argument is interpreted as port name if it is a string.
   *              A further string argument is interpreted as default_value. Another one as config entry.
   * numeric type: The first numeric argument is interpreted as default_value.
   */
  template<typename A1, typename ... ARest>
  tConveniencePort(tFrameworkElement * (*getContainer)(BASE*), const A1& arg1, const ARest&... rest) : PORT(CreatePCI(getContainer, arg1, rest...)) {}

  /*!
   * (relevant for input ports and parameters only)
   *
   * \return Has port changed since last reset?
   */
  bool HasChanged()
  {
    return HasChanged(this);
  }

  /*!
   * Resets port's changed flag
   * (both "real" port's and the one for the custom API)
   * (usually does not need to called - only if you want to ignore more changes)
   */
  void ResetChanged()
  {
    ResetChanged(this);
  }

protected:

  /*!
   * Create port creation info for this convenience port (non-template constructor)
   */
  tPortCreationInfo<T> CreateStandardPCI(const util::tString& name, tFrameworkElement* parent)
  {
    tPortCreationInfo<T> result;
    result.name = name;
    result.parent = parent;
    if (result.parent && typeid(*result.parent) == typeid(tPortGroup))
    {
      result.flags |= static_cast<tPortGroup*>(result.parent)->GetDefaultPortFlags();
    }
    return result;
  }

  /*!
   * Create port creation info for this convenience port (template constructor
   */
  template<typename A1, typename ... ARest>
  tPortCreationInfo<T> CreatePCI(tFrameworkElement * (*getContainer)(BASE*), const A1& arg1, const ARest&... rest)
  {
    tPortCreationInfo<T> result;
    if (internal::tIsString<A1>::value)
    {
      result = tPortCreationInfo<T>(arg1, rest...);
      if (result.name.Length() == 0)
      {
        result.name = this->GetPortName();
      }
      else
      {
        if (result.parent == NULL)
        {
          UpdateCurrentPortNameIndex(this->FindParent());
        }
        else
        {
          UpdateCurrentPortNameIndex(static_cast<BASE*>(result.parent));
        }
      }
    }
    else
    {
      result = tPortCreationInfo<T>(this->GetPortName(), arg1, rest...);
    }
    if (result.parent == NULL)
    {
      result.parent = getContainer(this->FindParent());
    }
    else
    {
      result.parent = getContainer(static_cast<BASE*>(result.parent));
    }
    if (result.parent && typeid(*result.parent) == typeid(tPortGroup))
    {
      result.flags |= static_cast<tPortGroup*>(result.parent)->GetDefaultPortFlags();
    }
    return result;
  }

private:

  /*! Helper methods for different kinds of base classes */
  static bool HasChanged(tPort<T>* p)
  {
    return p->GetWrapped()->GetCustomChangedFlag() != 0;
  }
  static bool HasChanged(tStaticParameter<T>* p)
  {
    return p->HasChanged();
  }

  void ResetChanged(tPort<T>* p)
  {
    p->ResetChanged();
    p->GetWrapped()->SetCustomChangedFlag(0);
  }
  void ResetChanged(tStaticParameter<T>* p)
  {
    p->ResetChanged();
  }
};

//----------------------------------------------------------------------
// End of namespace declaration
//----------------------------------------------------------------------
}
}
}

#endif
